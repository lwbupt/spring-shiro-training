<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wangzhixuan.mapper.PeopleMapper">
    <resultMap id="BaseResultMap" type="com.wangzhixuan.model.People">
        <id     column="id"             property="id" jdbcType="BIGINT"/>
        <result column="code"           property="code" jdbcType="VARCHAR" />
        <result column="name"           property="name" jdbcType="VARCHAR"/>
        <result column="sex"            property="sex" jdbcType="TINYINT"/>
        <result column="national_id"    property="nationalId" jdbcType="INTEGER"/>
        <result column="birthday"       property="birthday" jdbcType="DATE" />
        <result column="native_id"      property="nativeId" jdbcType="INTEGER"/>
        <result column="education_name" property="educationName" jdbcType="VARCHAR"/>
        <result column="degree_id"      property="degreeId" jdbcType="VARCHAR"/>
        <result column="political_name" property="politicalName" jdbcType="VARCHAR"/>
        <result column="party_date"     property="partyDate" jdbcType="DATE"/>
        <result column="work_date"      property="workDate"  jdbcType="DATE"/>
        <result column="school_date"    property="schoolDate" jdbcType="DATE"/>
        <result column="job_name"       property="jobName"  jdbcType="VARCHAR"/>
        <result column="job_category"   property="jobCategory" jdbcType="VARCHAR"/>
        <result column="job_level_id"   property="jobLevelId"  jdbcType="INTEGER"/>
        <result column="job_date"       property="jobDate"  jdbcType="DATE"/>
        <result column="job_level_date" property="jobLevelDate" jdbcType="DATE"/>
        <result column="age"            property="age"  jdbcType="INTEGER"/>
        <result column="virtual_age"    property="virtualAge" jdbcType="INTEGER"/>
        <result column="work_age"       property="workAge"  jdbcType="INTEGER"/>
        <result column="formation"      property="formation"  jdbcType="VARCHAR"/>
        <result column="mobile"         property="mobile" jdbcType="VARCHAR"/>
        <result column="marriage_id"    property="marriageId" jdbcType="INTEGER" />
        <result column="photoId"        property="photoId"  jdbcType="VARCHAR" />
        <result column="address"        property="address" jdbcType="VARCHAR"/>
        <result column="hukou"          property="hukou"   jdbcType="VARCHAR"/>
        <result column="hukou_address"  property="hukouAddress"  jdbcType="VARCHAR"/>
        <result column="final_education_name" property="finalEducationName" jdbcType="VARCHAR"/>
        <result column="major"          property="major" jdbcType="VARCHAR"/>
        <result column="graduate_school" property="graduateSchool" jdbcType="VARCHAR"/>
        <result column="contact"        property="contact" jdbcType="VARCHAR"/>
        <result column="relationship"   property="relationship" jdbcType="VARCHAR"/>
        <result column="contact_number" property="contactNumber" jdbcType="VARCHAR"/>
        <result column="family_info_1"  property="familyInfo1" jdbcType="VARCHAR"/>
        <result column="family_info_2"  property="familyInfo2"  jdbcType="VARCHAR"/>
        <result column="family_info_3"  property="familyInfo3"  jdbcType="VARCHAR"/>
        <result column="family_info_4"  property="familyInfo4"  jdbcType="VARCHAR"/>
        <result column="photo"          property="photo" jdbcType="VARCHAR" />
        <result column="identity_id"    property="identityId"   jdbcType="INTEGER"/>
        <result column="status"         property="status"       jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="peopleVoResultMap" type="com.wangzhixuan.vo.PeopleVo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="code"           property="code" jdbcType="VARCHAR"/>
        <result column="name"           property="name" jdbcType="VARCHAR"/>
        <result column="sex"            property="sex" jdbcType="TINYINT" />
        <result column="birthday" property="birthday" jdbcType="DATE" />
        <result column="job" property="job" jdbcType="VARCHAR" />
        <result column="salary" property="salary" jdbcType="DECIMAL" />
        <result column="photo"  property="photo" jdbcType="VARCHAR" />
        <result column="degree_id" property="degreeId" jdbcType="INTEGER" />
        <result column="degreeName" property="degreeName" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List">
        id, name, sex, birthday, job, salary, photo, degree_id, address
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from people
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findPeopleVoById" resultMap="peopleVoResultMap" parameterType="java.lang.Long">
        SELECT
          t.id,
          t.name,
          t.sex,
          t.birthday,
          t.job,
          t.salary,
          t.photo,
          t.degree_id,
          s.name as degreeName,
          t.address
        FROM
          people t
        LEFT JOIN
          dict_degree s ON s.id = t.degree_id
        <where>
            t.id = #{id}
        </where>
    </select>

    <select id="findPeopleById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from people
        where id = #{id}
    </select>

    <select id="findPeopleByName" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        from people
        where name LIKE concat('%',#{name},'%')
    </select>

    <select id="findPeoplePageCondition" resultMap="peopleVoResultMap" parameterType="PageInfo">
        SELECT
        t.id,
        t.name,
        t.sex,
        t.birthday,
        t.job,
        t.salary,
        t.degree_id,
        s.name as degreeName,
        t.address
        FROM
        people t
        LEFT JOIN
        dict_degree s ON s.id = t.degree_id
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                and t.name LIKE concat('%',#{condition.name},'%')
            </if>
            <if test=" condition.sex != null">
                and t.sex = #{condition.sex}
            </if>
            <if test=" condition.job != null and condition.job != ''">
                and t.job LIKE concat('%',#{condition.job},'%')
            </if>
            <if test=" condition.birthdayMin != null and condition.birthdayMin != ''">
                <![CDATA[ and t.birthday >= #{condition.birthdayMin} ]]>
            </if>
            <if test=" condition.birthdayMax != null and condition.birthdayMax != ''">
                <![CDATA[ and t.birthday <= #{condition.birthdayMax} ]]>
            </if>
            <if test=" condition.salaryMin != null">
                <![CDATA[ and t.salary >= #{condition.salaryMin} ]]>
            </if>
            <if test=" condition.salaryMax != null">
                <![CDATA[ and t.salary <= #{condition.salaryMax} ]]>
            </if>
            <if test=" condition.degreeId != null">
                and t.degree_id = #{condition.degreeId}
            </if>
            <if test=" condition.address != null and condition.address != ''">
                and t.address LIKE concat('%',#{condition.address},'%')
            </if>
        </where>
        LIMIT #{from}, #{size}
    </select>

    <select id="findPeoplePageCount" resultType="java.lang.Integer" parameterType="PageInfo">
        select count(*) count
        from people t
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                and t.name LIKE concat('%',#{condition.name},'%')
            </if>
            <if test=" condition.sex != null ">
                and t.sex = #{condition.sex}
            </if>
            <if test=" condition.job != null and condition.job != ''">
                and t.job LIKE concat('%',#{condition.job},'%')
            </if>
            <if test=" condition.birthdayMin != null and condition.birthdayMin != ''">
                <![CDATA[ and t.birthday >= #{condition.birthdayMin} ]]>
            </if>
            <if test=" condition.birthdayMax != null and condition.birthdayMax != ''">
                <![CDATA[ and t.birthday <= #{condition.birthdayMax} ]]>
            </if>
            <if test=" condition.salaryMin != null">
                <![CDATA[ and t.salary >= #{condition.salaryMin} ]]>
            </if>
            <if test=" condition.salaryMax != null">
                <![CDATA[ and t.salary <= #{condition.salaryMax} ]]>
            </if>
            <if test=" condition.degreeId != null">
                and t.degree_id = #{condition.degreeId}
            </if>
            <if test=" condition.address != null and condition.address != ''">
                and t.address LIKE concat('%',#{condition.address},'%')
            </if>
        </where>
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
        delete from people
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="batchDeleteByIds" parameterType="java.util.ArrayList">
        delete from people
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>


    <insert id="insert" parameterType="com.wangzhixuan.model.People">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into people (name, sex, birthday, job, salary, photo, degree_id, address)
        values (
          #{name,jdbcType=VARCHAR},
          #{sex,jdbcType=TINYINT},
          #{birthday,jdbcType=DATE},
          #{job, jdbcType=VARCHAR},
          #{salary,jdbcType=DECIMAL},
          #{photo, jdbcType=VARCHAR},
          #{degreeId, jdbcType=INTEGER},
          #{address, jdbcType=VARCHAR}
         )
    </insert>
    <insert id="insertByImport" parameterType="java.util.List">
        insert into people (name, sex, birthday, job, salary, degree_id, address)
        values
        <foreach item="item" index="index" collection="list" separator=",">
          (
	        #{item.name,jdbcType=VARCHAR},
	        #{item.sex,jdbcType=TINYINT},
	        #{item.birthday,jdbcType=DATE},
	        #{item.job, jdbcType=VARCHAR},
	        #{item.salary,jdbcType=DECIMAL},
            #{item.degreeId,jdbcType=INTEGER},
            #{item.address, jdbcType=VARCHAR}
	      )  
        </foreach>
    </insert>
    <update id="updatePeople" parameterType="com.wangzhixuan.model.People">
        update people
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="job != null">
                job = #{job,jdbcType=VARCHAR},
            </if>
            <if test="salary != null">
                salary = #{salary,jdbcType=DECIMAL},
            </if>
            <if test="photo != null">
                photo = #{photo, jdbcType=VARCHAR},
            </if>
            <if test="degreeId != null">
                degree_id = #{degreeId, jdbcType=INTEGER},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectPeopleByIds" resultMap="BaseResultMap" parameterType="java.util.ArrayList">
        select 
        	t.id,t.name,t.sex,t.birthday,t.job,t.salary,t.degree_id,t.address
        from people t
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectPeopleVoByIds" resultMap="peopleVoResultMap" parameterType="java.util.ArrayList">
        select
          t.id,t.name,t.sex,t.birthday,t.job,t.salary,t.degree_id,s.name as degreeName,t.address
        from people t
        left join
        dict_degree s ON s.id = t.degree_id
        where t.id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
</mapper>